@page "/products"

@if (ProductsCollection?.Count() > 0)
{
    <h3 class="h3">Products</h3>

    <InputText id="username"
               placeholder="Enter Username"
               class="form-control"
           DisplayName="User name"
           @bind-Value="@UserName"></InputText>

    <div class="row justify-content-center">
        @foreach (var product in ProductsCollection)
        {
            <DetailedProductCard AddProductToCart=@(AddProductToCart) Product="product"></DetailedProductCard>
        }
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Inject]
    public ICartState? CartState { get; set; }

    [Inject]
    private IProductService? ProductService { get; set; }

    [Inject]
    private ICartService? CartService { get; set; }

    private string UserName { get; set; }
    private IEnumerable<Models.ProductModel?>? ProductsCollection { get; set; }

    private async Task AddProductToCart(Models.ProductModel productModel)
    {
        if (string.IsNullOrWhiteSpace(UserName))
            return;

        Models.CartModel? cartModel = await CartService!.GetCartAsync(UserName);

        var cartItem = new Models.CartItemModel(productModel.Id, productModel.Name, 1, productModel.Price);
        cartModel = await CartService.UpdateCartAsync(cartModel with
            {
                Items = cartModel.Items.Append(cartItem)
            });

        int count = cartModel.Items.Count();

        CartState?.SetState(count);
    }

    protected override async Task OnInitializedAsync()
    {
        var collection = await ProductService!.GetProductsAsync();
        ProductsCollection = collection.ToList() ?? Enumerable.Empty<Models.ProductModel>();
    }
}
