@page "/"
@using KriniteWebShop.WebBlazorClient.Helpers;

<PageTitle>KriniteWebShop - Index Page</PageTitle>

@if (Products?.Count() > 0)
{
    <div class="latest-promo">
        <div class="latest-promo__product">
            <p>@PromoProduct?.Name</p>
            <img src="@PromoProduct?.Image" />
        </div>
        <div class="latest-promo__time">
            @currentDayTime.ToString(@"hh\:mm\:ss")
        </div>
    </div>

    <ProductsWrapper Products="@Products?.Take(4)" Header="Top products" Color="bg-blue"></ProductsWrapper>
    <ProductsWrapper Products="@Products?.TakeLast(4)" Header="New products" Color="bg-indigo"></ProductsWrapper>

    <div class="row justify-content-center">
        @foreach (var product in Products ?? Enumerable.Empty<Models.ProductModel>())
        {
            <ProductCard product="product"></ProductCard>
        }
    </div>
}
else
{
    <div class="d-block m-auto justify-content-center spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
@code {
    [Inject]
    private IProductService? productService { get; set; }
    private IEnumerable<Models.ProductModel?>? Products { get; set; }
    private Models.ProductModel? PromoProduct { get; set; }

    private readonly TimeSpan TimeInDay = new TimeSpan(24, 00, 00);
    private TimeSpan currentDayTime { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Products = await productService.GetProductsAsync();
        currentDayTime = TimeInDay - DateTime.Now.TimeOfDay;
        PromoProduct = Products.RandomElement();
        RunTimer();
    }

    private void RunTimer()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            currentDayTime = TimeInDay - DateTime.Now.TimeOfDay;
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);
    }
}